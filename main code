import pandas as pd
import string
from collections import Counter
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
import nltk
from transformers import pipeline

# Load the Excel file containing emotions
file_path = r'C:\Users\konag\PycharmProjects\emotionpro\emotions.xlsx'  # Update this with your actual path
data = pd.read_excel(file_path, engine='openpyxl')  # Specify the engine if needed

# Strip whitespace from column names if necessary
data.columns = data.columns.str.strip()

# Download necessary NLTK data (if not already downloaded)
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('vader_lexicon')

# Initialize the Hugging Face emotion analyzer
emotion_analyzer = pipeline(
    "text-classification",
    model="bhadresh-savani/distilbert-base-uncased-emotion",
    top_k=None  # Updated to avoid deprecation warning
)


# Function to preprocess text
def preprocess_text(text):
    """Clean, tokenize, and lemmatize the input text."""
    lower_case = text.lower()
    cleaned_text = lower_case.translate(str.maketrans('', '', string.punctuation))
    tokenized_words = word_tokenize(cleaned_text)
    final_words = [word for word in tokenized_words if word not in stopwords.words('english')]
    lemma_words = [WordNetLemmatizer().lemmatize(word) for word in final_words]
    return lemma_words


# Function to analyze sentiment using NLTK
def analyze_sentiment(sentiment_text):
    """Analyze and return the sentiment of the input text."""
    score = SentimentIntensityAnalyzer().polarity_scores(sentiment_text)
    if score['neg'] > score['pos']:
        return "Negative Sentiment"
    elif score['neg'] < score['pos']:
        return "Positive Sentiment"
    else:
        return "Neutral Sentiment"


# Function to analyze emotions using a local emotion lexicon loaded from Excel
def analyze_emotions(words, emotion_data):
    """Analyze and return emotion counts from the input words."""
    emotion_list = []

    # Create a dictionary from the DataFrame for quick lookup
    emotion_dict = dict(zip(emotion_data['word'], emotion_data['emotion']))

    for word in words:
        if word in emotion_dict:
            emotion_list.append(emotion_dict[word])

    return Counter(emotion_list)


# Function to detect emotions using Hugging Face
def detect_emotions(text):
    """Analyze emotions using the pre-trained Hugging Face model."""
    scores = emotion_analyzer(text)
    emotions = {score['label']: score['score'] for score in scores[0]}
    dominant_emotions = {key: value for key, value in emotions.items() if value > 0.2}
    return dominant_emotions if dominant_emotions else "Low confidence in detected emotions."


# Function to plot emotions with colors
def plot_emotions(emotion_counts):
    """Plot a bar chart of the emotions with specific colors."""

    # Define color mapping for different emotions
    color_mapping = {
        'happy': 'skyblue',
        'sad': 'lightcoral',
        'angry': 'tomato',
        'anxious': 'gold',
        'attached': 'lightgreen',
        'fearful': 'violet',
        'lustful': 'orange',
        # Add more mappings as needed
    }

    colors = [color_mapping.get(emotion, 'gray') for emotion in emotion_counts.keys()]

    plt.bar(emotion_counts.keys(), emotion_counts.values(), color=colors)
    plt.title("Emotion Analysis")
    plt.xlabel("Emotions")
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


# Main program
def main():
    print("Welcome to the Sentiment and Emotion Analyzer!")

    while True:
        review = input("\nEnter a product review (or type 'exit' to quit): ")

        if review.lower() == "exit":
            print("Goodbye!")
            break

        # Analyze sentiment
        sentiment = analyze_sentiment(review)
        print(f"Sentiment: {sentiment}")

        # Preprocess the review and analyze emotions using the loaded DataFrame
        processed_words = preprocess_text(review)

        # Debugging output for processed words (optional)
        # print("Processed words:", processed_words)

        emotion_counts = analyze_emotions(processed_words, data)

        # Display emotion counts and plot
        if emotion_counts:
            print("Emotion counts (from lexicon):", emotion_counts)
            plot_emotions(emotion_counts)
        else:
            print("No emotions detected using lexicon.")

        # Detect emotions using Hugging Face model
        hf_emotions = detect_emotions(review)
        print(f"Emotions detected (using Hugging Face model): {hf_emotions}")


if __name__ == "__main__":
    main()
